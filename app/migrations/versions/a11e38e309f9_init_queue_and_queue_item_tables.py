"""init queue and queue_item tables

Revision ID: a11e38e309f9
Revises: 29870d20b68f
Create Date: 2025-05-27 19:17:15.976112

"""
import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = 'a11e38e309f9'
down_revision = '29870d20b68f'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('queue',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('queue_item',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('queue_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('RUNNING', 'STOPPED', 'PENDING', 'SUCCESS', 'RETIRED', 'FAILED', name='rpastatus'), nullable=False),
    sa.Column('payload', sa.JSON(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('attempts', sa.Integer(), nullable=True),
    sa.Column('max_attempts', sa.Integer(), nullable=True),
    sa.Column('error', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('locked_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('locked_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('finished_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['queue_id'], ['queue.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('rpa_event_log')
    op.alter_column('process_event_log', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.create_index(op.f('ix_process_event_log_id'), 'process_event_log', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_process_event_log_id'), table_name='process_event_log')
    op.alter_column('process_event_log', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.create_table('rpa_event_log',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('rpa_event_log_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('process_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('event_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('event_source', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='rpa_event_log_pkey')
    )
    op.drop_table('queue_item')
    op.drop_table('queue')
    # ### end Alembic commands ###
